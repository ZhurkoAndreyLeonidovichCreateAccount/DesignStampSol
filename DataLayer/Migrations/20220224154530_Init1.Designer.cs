// <auto-generated />
using System;
using DataLayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataLayer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220224154530_Init1")]
    partial class Init1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataLayer.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<byte[]>("AvatarImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DataLayer.Entities.AllForce", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Pfelling")
                        .HasColumnType("float");

                    b.Property<double>("Ppunching")
                        .HasColumnType("float");

                    b.Property<string>("StampName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("StampName");

                    b.ToTable("AllForces");
                });

            modelBuilder.Entity("DataLayer.Entities.BottomPlate", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Hieght")
                        .HasColumnType("float");

                    b.Property<double>("SfelfHeight")
                        .HasColumnType("float");

                    b.Property<double>("SfelfWidth")
                        .HasColumnType("float");

                    b.Property<string>("StampName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("TotalLength")
                        .HasColumnType("float");

                    b.Property<double>("TotalWidth")
                        .HasColumnType("float");

                    b.Property<double>("СastHeight")
                        .HasColumnType("float");

                    b.Property<double>("СastLength")
                        .HasColumnType("float");

                    b.Property<double>("СastWidth")
                        .HasColumnType("float");

                    b.HasKey("Name");

                    b.HasIndex("StampName");

                    b.ToTable("BottomPlates");
                });

            modelBuilder.Entity("DataLayer.Entities.Bushing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ColumnDiametr")
                        .HasColumnType("int");

                    b.Property<int>("DepthHeight")
                        .HasColumnType("int");

                    b.Property<int>("FlangeDiametr")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PressedDiametr")
                        .HasColumnType("int");

                    b.Property<int>("TotalHeight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Bushings");
                });

            modelBuilder.Entity("DataLayer.Entities.Column", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Diametr")
                        .HasColumnType("int");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("HeightDepth")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Columns");
                });

            modelBuilder.Entity("DataLayer.Entities.Cover", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Diametr")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PressHeight")
                        .HasColumnType("int");

                    b.Property<int>("TotalHeight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Covers");
                });

            modelBuilder.Entity("DataLayer.Entities.Detail", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AmountDiametrHoles")
                        .HasColumnType("int");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<int>("ShearingStress")
                        .HasColumnType("int");

                    b.Property<int>("Thickness")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Name");

                    b.ToTable("Details");
                });

            modelBuilder.Entity("DataLayer.Entities.DifferHole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AmountHole")
                        .HasColumnType("int");

                    b.Property<int>("Diametr")
                        .HasColumnType("int");

                    b.Property<string>("detailName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("detailName");

                    b.ToTable("DifferHoles");
                });

            modelBuilder.Entity("DataLayer.Entities.EnlargedPunch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DiametrFlange")
                        .HasColumnType("int");

                    b.Property<int>("DiametrHoleFirst")
                        .HasColumnType("int");

                    b.Property<int>("DiametrHoleLast")
                        .HasColumnType("int");

                    b.Property<int>("DiametrSeat")
                        .HasColumnType("int");

                    b.Property<int>("HeighFlange")
                        .HasColumnType("int");

                    b.Property<int>("HeighSeat")
                        .HasColumnType("int");

                    b.Property<int>("HeightTottal")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EnlargedPunches");
                });

            modelBuilder.Entity("DataLayer.Entities.EnlargedPunchesID", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EnlargedPunchID")
                        .HasColumnType("int");

                    b.Property<string>("StampName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("EnlargedPunchID");

                    b.HasIndex("StampName");

                    b.ToTable("EnlargedPunchesID");
                });

            modelBuilder.Entity("DataLayer.Entities.Holder", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("BodyHieght")
                        .HasColumnType("float");

                    b.Property<double>("Length")
                        .HasColumnType("float");

                    b.Property<string>("StampName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("TotalHieght")
                        .HasColumnType("float");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.HasKey("Name");

                    b.HasIndex("StampName");

                    b.ToTable("Holders");
                });

            modelBuilder.Entity("DataLayer.Entities.Matrix", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Hieght")
                        .HasColumnType("float");

                    b.Property<double>("Length")
                        .HasColumnType("float");

                    b.Property<string>("StampName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.HasKey("Name");

                    b.HasIndex("StampName");

                    b.ToTable("Matrices");
                });

            modelBuilder.Entity("DataLayer.Entities.Press", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LengthAdapt")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ppress")
                        .HasColumnType("int");

                    b.Property<int>("PressRamStroke")
                        .HasColumnType("int");

                    b.Property<int>("WidthAdapt")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Pressess");
                });

            modelBuilder.Entity("DataLayer.Entities.Puller", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Hieght")
                        .HasColumnType("float");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<string>("StampName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Name");

                    b.HasIndex("StampName");

                    b.ToTable("Pullers");
                });

            modelBuilder.Entity("DataLayer.Entities.Punch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DiametrFlange")
                        .HasColumnType("int");

                    b.Property<int>("DiametrHole")
                        .HasColumnType("int");

                    b.Property<int>("DiametrSeat")
                        .HasColumnType("int");

                    b.Property<int>("HeighFlange")
                        .HasColumnType("int");

                    b.Property<int>("HeighSeat")
                        .HasColumnType("int");

                    b.Property<int>("HeightHole")
                        .HasColumnType("int");

                    b.Property<int>("HeightTottal")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Punches");
                });

            modelBuilder.Entity("DataLayer.Entities.PunchMatrix", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FlangeHieght")
                        .HasColumnType("int");

                    b.Property<int>("FlangeWidth")
                        .HasColumnType("int");

                    b.Property<int>("Hieght")
                        .HasColumnType("int");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<string>("StampName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Name");

                    b.HasIndex("StampName");

                    b.ToTable("PunchMatrices");
                });

            modelBuilder.Entity("DataLayer.Entities.PunchesID", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PunchID")
                        .HasColumnType("int");

                    b.Property<string>("StampName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("PunchID");

                    b.HasIndex("StampName");

                    b.ToTable("PunchesID");
                });

            modelBuilder.Entity("DataLayer.Entities.Spring", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Diametr")
                        .HasColumnType("int");

                    b.Property<int>("LengthScrew")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Pspring")
                        .HasColumnType("float");

                    b.Property<int>("Stroke")
                        .HasColumnType("int");

                    b.Property<int>("Tmax")
                        .HasColumnType("int");

                    b.Property<int>("Tmin")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Springs");
                });

            modelBuilder.Entity("DataLayer.Entities.Stamp", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BushingId")
                        .HasColumnType("int");

                    b.Property<int>("ClosedHeight")
                        .HasColumnType("int");

                    b.Property<int>("ColumnId")
                        .HasColumnType("int");

                    b.Property<int>("CoverId")
                        .HasColumnType("int");

                    b.Property<int>("PressId")
                        .HasColumnType("int");

                    b.Property<int>("SpringId")
                        .HasColumnType("int");

                    b.Property<string>("detailName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.HasIndex("BushingId");

                    b.HasIndex("ColumnId");

                    b.HasIndex("CoverId");

                    b.HasIndex("PressId");

                    b.HasIndex("SpringId");

                    b.HasIndex("detailName");

                    b.ToTable("Stamps");
                });

            modelBuilder.Entity("DataLayer.Entities.TopPlate", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Hieght")
                        .HasColumnType("float");

                    b.Property<double>("SfelfHeight")
                        .HasColumnType("float");

                    b.Property<double>("SfelfWidth")
                        .HasColumnType("float");

                    b.Property<string>("StampName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("TotalLength")
                        .HasColumnType("float");

                    b.Property<double>("TotalWidth")
                        .HasColumnType("float");

                    b.Property<double>("СastHeight")
                        .HasColumnType("float");

                    b.Property<double>("СastLength")
                        .HasColumnType("float");

                    b.Property<double>("СastWidth")
                        .HasColumnType("float");

                    b.HasKey("Name");

                    b.HasIndex("StampName");

                    b.ToTable("TopPlates");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DataLayer.Entities.AllForce", b =>
                {
                    b.HasOne("DataLayer.Entities.Stamp", "stamp")
                        .WithMany()
                        .HasForeignKey("StampName");
                });

            modelBuilder.Entity("DataLayer.Entities.BottomPlate", b =>
                {
                    b.HasOne("DataLayer.Entities.Stamp", "stamp")
                        .WithMany()
                        .HasForeignKey("StampName");
                });

            modelBuilder.Entity("DataLayer.Entities.DifferHole", b =>
                {
                    b.HasOne("DataLayer.Entities.Detail", "detail")
                        .WithMany("differHoles")
                        .HasForeignKey("detailName");
                });

            modelBuilder.Entity("DataLayer.Entities.EnlargedPunchesID", b =>
                {
                    b.HasOne("DataLayer.Entities.EnlargedPunch", "enlargedPunch")
                        .WithMany()
                        .HasForeignKey("EnlargedPunchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.Stamp", "stamp")
                        .WithMany("EnlargedPunchesId")
                        .HasForeignKey("StampName");
                });

            modelBuilder.Entity("DataLayer.Entities.Holder", b =>
                {
                    b.HasOne("DataLayer.Entities.Stamp", "stamp")
                        .WithMany()
                        .HasForeignKey("StampName");
                });

            modelBuilder.Entity("DataLayer.Entities.Matrix", b =>
                {
                    b.HasOne("DataLayer.Entities.Stamp", "stamp")
                        .WithMany()
                        .HasForeignKey("StampName");
                });

            modelBuilder.Entity("DataLayer.Entities.Puller", b =>
                {
                    b.HasOne("DataLayer.Entities.Stamp", "stamp")
                        .WithMany()
                        .HasForeignKey("StampName");
                });

            modelBuilder.Entity("DataLayer.Entities.PunchMatrix", b =>
                {
                    b.HasOne("DataLayer.Entities.Stamp", "stamp")
                        .WithMany()
                        .HasForeignKey("StampName");
                });

            modelBuilder.Entity("DataLayer.Entities.PunchesID", b =>
                {
                    b.HasOne("DataLayer.Entities.Punch", "punch")
                        .WithMany()
                        .HasForeignKey("PunchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.Stamp", "stamp")
                        .WithMany("PunchesId")
                        .HasForeignKey("StampName");
                });

            modelBuilder.Entity("DataLayer.Entities.Stamp", b =>
                {
                    b.HasOne("DataLayer.Entities.Bushing", "bushing")
                        .WithMany()
                        .HasForeignKey("BushingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.Column", "column")
                        .WithMany()
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.Cover", "cover")
                        .WithMany()
                        .HasForeignKey("CoverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.Press", "press")
                        .WithMany()
                        .HasForeignKey("PressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.Spring", "spring")
                        .WithMany()
                        .HasForeignKey("SpringId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.Detail", "detail")
                        .WithMany()
                        .HasForeignKey("detailName");
                });

            modelBuilder.Entity("DataLayer.Entities.TopPlate", b =>
                {
                    b.HasOne("DataLayer.Entities.Stamp", "stamp")
                        .WithMany()
                        .HasForeignKey("StampName");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DataLayer.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DataLayer.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DataLayer.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
